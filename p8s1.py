# -*- encoding: utf-8 -*-
"""
The four adjacent digits in the 1000-digit number
that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number
that have the greatest product. What is the value of this product?
"""
import operator
import functools

number = '7316717653133062491922511967442657474235534919493496983520312774' \
         '5063262395783180169848018694788518438586156078911294949545950173' \
         '7958331952853208805511125406987471585238630507156932909632952274' \
         '4304355766896648950445244523161731856403098711121722383113622298' \
         '9342338030813533627661428280644448664523874930358907296290491560' \
         '4407723907138105158593079608667017242712188399879790879227492190' \
         '1699720888093776657273330010533678812202354218097512545405947522' \
         '4352584907711670556013604839586446706324415722155397536978179778' \
         '4617406495514929086256932197846862248283972241375657056057490261' \
         '4079729686524145351004748216637048440319989000889524345065854122' \
         '7588666881164271714799244429282308634656748139191231628245861786' \
         '6458359124566529476545682848912883142607690042242190226710556263' \
         '2111110937054421750694165896040807198403850962455444362981230987' \
         '8799272442849091888458015616609791913387549920052406368991256071' \
         '7606058861164671094050775410022569831552000559357297257163626956' \
         '1882670428252483600823257530420752963450'

adjacent_size = 13

max_mul = 0
max_adjacent = []

for i in range(len(number) - adjacent_size):
    adjacent_numbers = [int(x) for x in number[i:adjacent_size + i]]
    mul = functools.reduce(operator.mul, adjacent_numbers, 1)
    if mul > max_mul:
        max_mul = mul
        max_adjacent = adjacent_numbers

print('Max multiplication: {0}'.format(max_mul))
print('Max adjacent numbers: {0}'.format(max_adjacent))

